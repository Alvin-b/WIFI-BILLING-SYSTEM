const os = require('os');

/**
 * Generate a MikroTik RouterOS configuration script (.rsc) that
 * - Sets router identity (station name)
 * - Configures RADIUS (auth + accounting + CoA)
 * - Configures Hotspot profile to use RADIUS and external portal
 * - Creates/updates a Hotspot (optional)
 * - Adds walled-garden entries for your portal and payment gateways
 * - Optionally registers NAS with backend via fetch (commented)
 *
 * @param {Object} opts
 * @param {string} opts.stationName               Human-friendly station name (used as identity)
 * @param {string} opts.routerIp                  Router IP used for RADIUS src-address and hotspot-address
 * @param {string} opts.hotspotInterface          Interface to bind hotspot (e.g. bridge-local)
 * @param {string} opts.hotspotName               Hotspot name (e.g. hotspot1)
 * @param {string} opts.addressPool               Address pool for hotspot users (e.g. hs-pool-1)
 * @param {Object} opts.radius                    RADIUS settings
 * @param {string} opts.radius.host               RADIUS server IP/host
 * @param {string} opts.radius.secret             Shared secret
 * @param {number} [opts.radius.authPort=1812]    Auth port
 * @param {number} [opts.radius.acctPort=1813]    Acct port
 * @param {number} [opts.radius.coaPort=3799]     CoA port
 * @param {Object} opts.portal                    Portal/billing URLs
 * @param {string} opts.portal.frontendUrl        Captive portal base URL (e.g. http://portal.example.com)
 * @param {string} opts.portal.backendUrl         Backend base URL (e.g. https://api.example.com)
 * @param {string[]} [opts.portal.extraAllowedHosts] Extra hosts for walled-garden (e.g. Daraja/KCB domains)
 * @returns {string}
 */
function generateMikrotikConfig(opts) {
  const {
    stationName,
    routerIp,
    hotspotInterface,
    hotspotName,
    addressPool,
    radius,
    portal,
  } = opts;

  const authPort = radius.authPort || 1812;
  const acctPort = radius.acctPort || 1813;
  const coaPort = radius.coaPort || 3799;

  const loginUrl = `${portal.frontendUrl.replace(/\/$/, '')}/login`;
  const allowedHosts = [
    ...new Set([
      // Your portal and backend first
      new URL(portal.frontendUrl).hostname,
      new URL(portal.backendUrl).hostname,
      // Common payment provider domains (adjust as needed)
      'safaricom.co.ke',
      'sandbox.safaricom.co.ke',
      'api.safaricom.co.ke',
      'api-buni.sandbox.co.ke',
      'buni.kcbgroup.com',
      ...(portal.extraAllowedHosts || [])
    ])
  ].filter(Boolean);

  const lines = [];
  const c = (l='') => lines.push(l);
  const comment = (txt) => c(`:put "# ${txt}"`);

  c('# RouterOS configuration generated by WiFi Billing System');
  c(`# Generated at ${new Date().toISOString()}`);
  c('');

  comment('Set router identity (used as NAS-Identifier in RADIUS)');
  c(`/system identity set name="${escapeStr(stationName)}"`);
  c('');

  comment('Configure RADIUS servers for Hotspot');
  c(`/radius add service=hotspot address=${escapeStr(radius.host)} secret="${escapeStr(radius.secret)}" authentication-port=${authPort} accounting-port=${acctPort} src-address=${escapeStr(routerIp)} timeout=3s`);
  c(`/radius incoming set accept=yes port=${coaPort}`);
  c('');

  comment('Create/Update Hotspot profile to use external portal login and RADIUS');
  c(`/ip hotspot profile add name="${escapeStr(hotspotName)}-profile" hotspot-address=${escapeStr(routerIp)} login-by=http-pap,http-chap http-cookie-lifetime=1d use-radius=yes radius-accounting=yes`);
  c(`/ip hotspot profile set [find name="${escapeStr(hotspotName)}-profile"] login-url="${escapeStr(loginUrl)}"`);
  c('');

  comment('Create Hotspot (if it does not exist) and bind to interface');
  c(`/ip hotspot add name="${escapeStr(hotspotName)}" interface="${escapeStr(hotspotInterface)}" address-pool=${escapeStr(addressPool)} profile="${escapeStr(hotspotName)}-profile" disabled=no`);
  c('');

  comment('Walled-garden: allow access to portal, backend and payment domains before auth');
  c('/ip hotspot walled-garden reset');
  allowedHosts.forEach((host) => {
    c(`/ip hotspot walled-garden add dst-host=${escapeStr(host)}`);
  });
  c('');

  comment('Optional: register NAS with backend (uncomment and adjust if you want one-time registration)');
  c(`#:delay 2s`);
  c(`#:put "# Registering NAS with backend"`);
  c(`# /tool fetch url="${escapeStr(portal.backendUrl.replace(/\/$/, '') + '/api/radius/nas/register')}?station=${encodeURIComponent(stationName)}&ip=${encodeURIComponent(routerIp)}&hotspot=${encodeURIComponent(hotspotName)}" keep-result=no`);
  c('');

  comment('Done');
  c(':put "# Configuration complete"');

  // Join with RouterOS-friendly newlines
  return lines.join('\r\n') + '\r\n';
}

function escapeStr(s) {
  if (s == null) return '';
  return String(s).replace(/"/g, '\\"');
}

module.exports = { generateMikrotikConfig };